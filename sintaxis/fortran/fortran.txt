---
title: Fortran
description: Sintaxis básica de Modern Fortran.
---

# Fortran
> Fortran es un lenguaje de programación de alto nivel de propósito general, ​ procedimental​ e imperativo, que está especialmente adaptado al cálculo numérico y a la computación científica.

## Hola Mundo!

```fortran
program nombre_del_programa

  print*, "Hola mundo!"

end program
```

## Compilación y ejecución:
```bash
gfortran 00holamundo.f90
./a.out                           
```

## Estructura:

```fortran
  PROGRAM nombre_del_programa
 
     !Esto es un comentario

     !Declaracion de variables:
 implicit none
 character(len=10) :: nombre 
  
 nombre='estimado' 
 
     !Instrucciones del programa:
 print*,"Cual es tu nombre?"
 read*,nombre
 
 print*,"Hola ",nombre,"! Todo tranqui?" 
  
  END PROGRAM
```


## DataTypes:
```fortran
 PROGRAM datatypes
  implicit none
  
  logical  :: p, q=.TRUE.
  
  !Inicialización
  p=.FALSE.
  
  print*,'p: ',p
  print*,'q: ',q
  
  !Operaciones LOGICAS:
  print*,  .NOT. p
  print*,  p .AND.  q
  print*,  p .OR.   q
  print*,  p .EQV.  q
  print*,  p .NEQV. q  !XOR

 END PROGRAM datatypes
	PROGRAM datatypes
	   implicit none
	   integer :: n=7,m
	   
     m=3

	!Operaciones con INTEGER
	!Relacionales (retorna LOGICAL)
     print*, n == m  ! .EQ.
	   print*, n /= m  ! .NE.
	   print*, n <  m  ! .LT.
	   print*, n <= m  ! .LE.
	   print*, n >  m  ! .GT.
	   print*, n >= m  ! .GE.
	
  !Aritméticas: + - * / **
	   print*, n+m
	   print*, n/m

	!Funciones intrinsecas
	   print*, abs(n)   !modulo de n
	   print*, mod(n,m) !resto de n/m

  END PROGRAM datatypes
  PROGRAM datatypes
     implicit none
  
     real 		:: x=1.2e-1, y=2.78
     real, parameter :: pi=3.14159265365897
  
  !Operaciones con REAL
  !Aritméticas: 	+ - * / **
     print*, 3+x*y
     print*, (3+x)*y
     print*, y**2*3
     print*, y**(2*3)
  !Funciones intrinsecas
     print*, sqrt(x),exp(x),log(x),log10(x);
     print*, sin(x),cos(x),tan(x);
     print*, asin(x),acos(x),atan(x);
     
     print*, real(7), int(7.000);
     print*, mod(x,y), abs(x);
     print*, min(x,y), max(x,y);
   
  END PROGRAM datatypes
  PROGRAM datatypes
     implicit none
     complex :: z1=(0,1),z2=(3,2)
  
 !Operaciones con COMPLEX
     print*, z1
     print*, z2
 !Aritmética: 	+ - * / **
     print*, z1+z2
     print*, z1-z2
     print*, z1*z2
     print*, z1/z2
     print*, z1**2
 
  !Funciones intrinsecas
     print*, real(z1)
     print*, aimag(z1)
     print*, conjg(z1)
     print*, abs(z2)
     print*, atan2(real(z2),aimag(z2))
  
  END PROGRAM datatypes
 program datatypes  
 
   implicit none

   character*30       :: str1="Esto es un string       "
   character (len=30) :: str2=", este es otro string.  "
  
   print*, str1
   
   !Operaciones con CHARACTER:
   print*, str1(9:25)
   print*, str1//str2
   print*, trim(str1)//trim(str2)
  
   print*, len(str1)
   print*, len(trim(str1))

   print*, repeat(str2(11:15),4)
   
   print*, scan(str1, 'aeiou')
   print*, index(str2, 'otro',back=.true.)
   print*, verify(str1,'Esto es un strang')
 end program datatypes
```

## Input/Output
```fortran
 program io
 
  implicit none
  integer :: ioerr, inq
  character(len=15) :: nombre="Ramiro", apellido, mensaje
  integer ::  edad=28,altura, peso
  
  namelist/mi_lista/nombre,apellido,altura, peso,mensaje

  !STDIN/STDOUT
   write(*,*) 'Esto es un stdout'
   print*, 'Dame un stdin:'; read(*,*) mensaje
   
  !FMT:
   write(*,'("Mi nombre es:" a8", y tengo" i5 "años."/)') nombre,edad

   print*,"Ingresa tu apellido:"; read(*,'(a10)') apellido
   write(*,'("Mi nombre es:" a8 a8/)') nombre,apellido

 end program
```


## Controladores
```fortran
  PROGRAM control
     implicit none
     real    :: x
     
     x=1.0
     
    !CONDICIONALES (IF,ELSE,ELSE IF)
   if (x>0) then
             print*, "x es positivo"
    else if (x<0) then
             print*, "x es negativo"
    else
             print*, "x es cero"
   end if

    !SWITCHES (SELECT/CASE)
     
    select case(x)
      case(>0)
             print*, "x es positivo"
      case(<0)
             print*, 'x es negativo'
      case default
             print*, "x es cero"
    end select

  END PROGRAM control
  PROGRAM control
     implicit none

     integer :: i
  !DO
  do i=-6,10,2
     print*,i
  end do
    
  !DO WHILE
  i=1
  do while (i<10)
     print*, i
     i=i+1
  end do

  END PROGRAM control
```

## Funciones y Subrutinas
```fortran
  program procedimientos
  
     implicit none
     integer :: i
     real 	:: a,b,c
     
     a=1.
     b=2.
     c=0.
     
     print*,a,b,c
     
     !Función:
     c = suma(a,b)
     print*,a,b,c
     
     
  contains
     
     function suma(arg1,arg2) result(resultado)
          implicit none
          real, intent(in) :: arg1,arg2
          real             :: resultado
              
          resultado=arg1+arg2
     end function suma
     
     
  end program procedimientos
  program procedimientos
  
     implicit none
     integer :: i
     real 	:: a,b,c
     
     a=1.;b=2.;c=0.
     print*,a,b,c
     
     
     call suma(a,b,c)
     print*,a,b,c
  
  contains
  
  subroutine suma(arg1,arg2,arg3) 
     implicit none
     real, intent(in)     :: arg1,arg2
     real, intent(inout)  :: arg3
 
     arg3=arg1+arg2
  end subroutine suma
  
  end program procedimientos

```


## Modulos:
```fortran
	module mod_int
     implicit none
     real, private, parameter :: pi=3.14159265359

     interface RaizCuad
             procedure raizCuadR, raizCuadC
     end interface

     contains

     function raizCuadR(x)    result(x_cuadrado)
             real :: x, x_cuadrado
             x_cuadrado=x*x
     end function
   
    function raizCuadC(x)    result(x_cuadrado)
             complex :: x, x_cuadrado
             x_cuadrado=x*x
     end function

	end module 

  program main
  
  use mod_int
  use mod_ext, only : area

  implicit none
  real :: r
  complex :: z

  r=10.
  print*, area(r)
  
  print*, raizCuad(r)

  z=(2.,1.)
  print*, raizCuad(z)

  end program

!COMPILACION
! gfortran -c 05ext_mod.f90 05Modulos.f90
! gfortran  05ext_mod.o 05Modulos.o

```

```fortran
  module mod_ext
     implicit none
     	real,private, parameter :: pi=3.14159265359
     
    contains
     
     function area(r)        result(A)
             implicit none
     	real, intent(in) :: r
     	real :: A
     
             A=2*pi*r*r
      
    end function area
     
  end module 
```



## Input / Output II
```fortran
 program io
 
  implicit none
  integer :: ioerr, inq
  character(len=15) :: nombre="Ramiro", apellido, mensaje
  integer ::  edad=28,altura, peso
  
  namelist/mi_lista/nombre,apellido,altura, peso,mensaje

  !OPEN / CLOSE
   open(unit=1,FILE="archivo.txt",STATUS="NEW",ACTION="WRITE")
   write(1,*) "Hola, ..dejo este mensaje."
   close(1)
  
  !READ / WRITE
   open(unit=2,file="archivo.txt",STATUS="OLD",ACTION="READWRITE")
   read(unit=2,FMT='(a20)') mensaje
   write(2,'(a20/)') mensaje
   close(2)

  !NAMELISTS
   open(unit=3,file="mi_namelist.inp")
   read(3, mi_lista)
   close(3)
    
  write(*,'("Nombre:"2(a8)/"Edad:"i4/"Altura:"i4/"Peso:"i6/"Mensaje &       
  :"a30/)') nombre,apellido,edad,altura,peso,mensaje

  !INQUIRE  (para obtener info sobre el archivo a leer)
  ! puede ser llamado por nombre de archivo ó por unidad:
  inquire(file='data.txt',exist=inq);print*,"Existe data.txt?",inq
  inquire(unit=1,opened=inq); print*,"Esta abierto UNIT=1?",inq
   
 end program
```


## Arrays:

```fortran
program arrays
  
   implicit none
   
   integer, parameter :: n=4
   character(len=20), dimension(5) :: frutas
   integer :: m(3)
   real    :: v(3)
   real    :: A(3,3)
   real(8) :: B(n,n)
   integer :: i
   
   !Acceso y asignacion de valores:
   frutas(1)='manzana'
   frutas(2)='banana'
   frutas(4)='kiwi'
     
   print*, frutas
   print*, frutas(4)
   print*, frutas(2:4)
   
   !loops:
   do i=1,3,1
     v(i)=i*0.45
   end do
   print*, v
   !loops implicitos
   m=(/ (i,i=1,9,3) /)
   print*,m
   v=(/ (i,i=1, 3,1)  /)*0.45
   print*, v
   v=(/ (i*0.45,i=1, 3,1)  /)  !otra forma
   print*, v
   
   A= 0.                       !todos ceros
   print*,"Nula:"
   write(*,'(3(f8.2))') A
   
   print*, "Identidad:"
   A(1,:)=(/ 1.0, 0.0, 0.0 /)
   A(2,:)=(/ 0.0, 1.0, 0.0 /)
   A(3,:)=(/ 0.0, 0.0, 1.0 /)
   write(*,'(3(f8.2))') A
   
   print*, "Matriz A:"
   A = reshape((/(i*0.25,i=1,size(A))/), shape(A))
   write(*,'(3(f8.2))') A

   print*, "Matriz B:"
 B=reshape([16d0,  5d0,  9d0,  4d0, &
    3d0, 10d0,  6d0, 15d0, &
    2d0, 11d0,  7d0, 14d0, &
   13d0,  8d0, 12d0,  1d0], [n, n])
   print*,B

   
   !Aritmética + - * /   (entre aquellos de misma forma!!)
   print*,'A+A' 
   write(*,'(3(f8.2))') A+A
   print*,'A*A'
   write(*,'(3(f8.2))') A*A
   
   !Intrinsecos a arrays:
   print*,'sum(A)', sum(A)
   print*,'product(A)',product(A)
   
   print*,'size(A)', size(A)
   print*,'shape(A)',shape(A)
   
   print*,'lbound(A)',lbound(A)
   print*,'ubound(A)',ubound(A)
   
   print*,'minval(A)',minval(A)
   print*,'maxval(A)',maxval(A)
   print*,'minloc(A)',minloc(A)
   print*,'maxloc(A)',maxloc(A)
   
   !Operaciones relacionales
   print*,'all(A<0.3)',all(A<0.3)
   print*,'any(A<0.6)',any(A<0.6)
   print*,'count(A>0.4)',count(A>0.4)
   
end program
```


## KIND y porabilidad
```fortran
program kind
   implicit none
   
   integer, PARAMETER :: i8 = SELECTED_INT_KIND(2)
   integer, PARAMETER :: i16= SELECTED_INT_KIND(4)
   integer, PARAMETER :: i32= SELECTED_INT_KIND(9)
   integer, PARAMETER :: i64= SELECTED_INT_KIND(18)
 
   INTEGER, PARAMETER :: sp = SELECTED_REAL_KIND(6,37)
   INTEGER, PARAMETER :: dp = SELECTED_REAL_KIND(15,307)
   INTEGER, PARAMETER :: qp = SELECTED_REAL_KIND(30,291)
 
   integer(kind=i8)  :: int_i8 =2
   integer(kind=i16) :: int_i16=2
   integer(kind=i32) :: int_i32=2
   integer(kind=i64) :: int_i64=2

   real(kind=sp) :: float_sp=3.14159265359
   real(kind=dp) :: float_dp=2.71828182846
   real(kind=qp) :: float_qp=1.41421356237

   integer(kind=1) :: i
    
   
   write(*,'("KIND: "4(i24))')i8,i16,i32,i64
  do i=1,64,1
     write(*,'("2**"(i2)"="4(i24))') i,int_i8**i,int_i16**i, int_i32**i,int_i64**i
  end do 
   
   print*, huge(int_i16)
   print*, digits(int_i16), radix(int_i16), range(int_i16)

   print*, float_sp,float_dp,float_qp
   !print*, kind(float_dp)
   print*, tiny(float_dp), epsilon(float_dp), huge(float_dp)
   print*, nearest(float_dp,1.)
   print*, digits(float_dp), radix(float_dp), range(float_dp)
   print*, minexponent(float_dp), maxexponent(float_dp)

   
end program 
```


## Memoria:
```fortran
  program memory
    implicit none
    
    real, ALLOCATABLE  :: A(:,:)
    integer :: i
   
    allocate(A(3,3))
    
    A=0.
    do i=1,3
 A(i,i)=1.0
    end do
    
    write(*,'(("size:"i3)"; shape:"2(i3))') size(A),shape(A) 
    write(*,'(3(f9.3))')A

    deallocate(A)
    
    allocate(A(2,2))
    A=3.2321

    write(*,'(("size:"i3)"; shape:"2(i3))') size(A),shape(A) 
    write(*,'(2(f9.3))')A

  end program memory
```

